---
title: "Weather data"
format: html
editor: visual
echo: false
---

## Set up

```{r setup, include=FALSE}

# libraries
library(tigris)
library(dplyr)
library(exactextractr)
library(data.table)
library(raster)
library(stringr)
library(lubridate)
library(terra)
library(dplyr)
library(purrr)
library(sf)
library(future.apply)
library(soilDB)


# no warnings in the output
options(warn=-1)
```

# Weather data

## Function

```{r}
process_gridMET_data <- function(states, var_name, years) {

  if (!dir.exists("Data")) dir.create("Data")
  

  counties <- purrr::map_dfr(states, ~ tigris::counties(state = .x)) %>%
    dplyr::select(STATEFP, COUNTYFP) %>%
    mutate(rowid = row_number())
  
 
  all_data <- list()
  
 
  for (year in years) {

    target_url <- paste0("http://www.northwestknowledge.net/metdata/data/", var_name, "_", year, ".nc")
    file_name <- paste0("Data/", var_name, "_", year, ".nc")
    
  
    tryCatch({
      downloader::download(url = target_url, destfile = file_name, mode = "wb", timeout = 600)
      
  
      temp_rast <- rast(file_name)
      
   
      temp_data <- exact_extract(temp_rast, counties, progress = FALSE) %>%
        rbindlist(idcol = "rowid") %>%
        melt(id.var = c("rowid", "coverage_fraction")) %>%
        .[!is.na(value), ] %>%
        .[, variable := str_sub(variable, -5, -1) %>% as.numeric()] %>%
        .[, date := variable + ymd("1900-01-01")] %>%
        .[, .(value = sum(value * coverage_fraction) / sum(coverage_fraction)), by = .(rowid, date)] %>%
        .[, var := var_name]
      
    
      all_data[[as.character(year)]] <- temp_data
      
    }, error = function(e) {
      message(paste("Failed to download or process data for", var_name, "in year", year, ":", e))
    })
  }

  final_data <- rbindlist(all_data, idcol = "year")
  

  final_data <- counties %>%
    left_join(final_data, by = "rowid")
  
  return(final_data)
}


```

```{r}

states <- c("IA", "IL", "IN", "MN", "MO", "OH", "KS") 

# states <- c("IA", "IL")   
var_names <- c("pr", "tmmx", "tmmn") # precipitation, max temperature, min temperature
#years <- 2019:2020
years <- 1980:2023

results <- lapply(var_names, function(var_name) {
  process_gridMET_data(states = states, var_name = var_name, years = years)
})


final_results <- rbindlist(results, idcol = "variable")

saveRDS(final_results, "all_states.rds")
```

# Precipitation

```{r}


pr_data <- final_results[final_results$var == "pr", ]
head(pr_data)


library(data.table)Precipitation
library(lubridate)


setDT(pr_data)


pr_data[, `:=`(year = year(date), month = month(date))]

# sum rain
monthly_pr_data <- pr_data[, .(monthly_pr = sum(value, na.rm = TRUE)), by = .(year, month, STATEFP, COUNTYFP, rowid)]


head(monthly_pr_data)


```

# Monthly weather data

```{r}

# Monthly data


setDT(final_results)




final_results[, `:=`(year = year(date), month = month(date))]


monthly_pr <- final_results[var == "pr", .(monthly_pr = sum(value, na.rm = TRUE)), 
                            by = .(year, month, STATEFP, COUNTYFP, rowid)]

monthly_temp <- final_results[var %in% c("tmmx", "tmmn"), 
                              .(monthly_temp = mean(value, na.rm = TRUE)), 
                              by = .(year, month, STATEFP, COUNTYFP, rowid, var)]

monthly_temp_wide <- dcast(monthly_temp, year + month + STATEFP + COUNTYFP + rowid ~ var, value.var = "monthly_temp")

monthly_data <- merge(monthly_pr, monthly_temp_wide, by = c("year", "month", "STATEFP", "COUNTYFP", "rowid"), all = TRUE)


```

# Yearly weather data

```{r}

setDT(final_results)

final_results[, year := year(date)]

yearly_pr <- final_results[var == "pr", .(yearly_pr = sum(value, na.rm = TRUE)), 
                           by = .(year, STATEFP, COUNTYFP, rowid)]

yearly_temp <- final_results[var %in% c("tmmx", "tmmn"), 
                             .(yearly_temp = mean(value, na.rm = TRUE)), 
                             by = .(year, STATEFP, COUNTYFP, rowid, var)]

yearly_temp_wide <- dcast(yearly_temp, year + STATEFP + COUNTYFP + rowid ~ var, value.var = "yearly_temp")

yearly_data <- merge(yearly_pr, yearly_temp_wide, by = c("year", "STATEFP", "COUNTYFP", "rowid"), all = TRUE)

head(yearly_data)
```

# Yield data

```{r}


# Define crops, states, and years
crops <- c("CORN", "WHEAT", "SOYBEANS")
states <- c("IOWA", "ILLINOIS", "INDIANA", "MINNESOTA", "MISSOURI", "OHIO", "KANSAS")
years <- paste(2000:2023)

# Function to get data for a specific crop, state, and year
get_crop_data <- function(crop, state, year) {
  tryCatch({
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = crop,
      geographic_level = "COUNTY",
      state = state,
      year = as.character(year),
      geometry = TRUE
    ) %>%
      # Keep only selected variables
      dplyr::select(
        year, county_name, county_code, state_name,
        state_fips_code, short_desc, Value
      )
  }, error = function(e) {
    # Return NULL for combinations with no data 
    NULL
  })
}

# Create all combinations of crops, states, and years
combinations <- expand.grid(crop = crops, state = states, year = years)


crop_state_year_data <- combinations %>%
  pmap_dfr(~ get_crop_data(..1, ..2, ..3))


head(crop_state_year_data)

```

Download yield data

```{r}

(
  IL_CO_NE_corn <-
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = "CORN",
      geographic_level = "COUNTY",
      state = c("IOWA", "ILLINOIS", "INDIANA", "MINNESOTA", "MISSOURI", "OHIO", "KANSAS"),
      year = paste(2000:2023),
      geometry = TRUE
    ) %>%
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name,
      state_fips_code, short_desc, Value
    )
)



(
  IL_CO_NE_corn <-
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = "CORN",
      geographic_level = "COUNTY",
      state = c("ILLINOIS", "IOWA", "MISSOURI", "KANSAS"),
      year = paste(2000:2023),
      geometry = TRUE
    ) %>%
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name,
      state_fips_code, short_desc, Value
    )
)


##$$

# works: "ILLINOIS", "IOWA", "MISSOURI", "KANSAS"

(
  IL_CO_NE_corn_two_more <-
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = "CORN",
      geographic_level = "COUNTY",
      state = c("INDIANA", "OHIO"),
      year = paste(2000:2023),
      geometry = TRUE
    ) %>%
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name,
      state_fips_code, short_desc, Value
    )
)

corn_1 <-  IL_CO_NE_corn
corn_2 <-  IL_CO_NE_corn_two_more


## Wheat

(
  WHEAT_1 <-
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = "WHEAT",
      geographic_level = "COUNTY",
      state = c("ILLINOIS"),
      year = paste(2000:2023),
      geometry = TRUE
    ) %>%
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name,
      state_fips_code, short_desc, Value
    )
)

# c("IOWA", "ILLINOIS", "INDIANA", "MINNESOTA", "MISSOURI", "OHIO", "KANSAS")

(
  WHEAT_iowa <-
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = "WHEAT",
      geographic_level = "COUNTY",
      state = c("IOWA"),
      year = paste(2000:2023),
      geometry = TRUE
    ) %>%
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name,
      state_fips_code, short_desc, Value
    )
)


(
  WHEAT_rest <-
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = "WHEAT",
      geographic_level = "COUNTY",
      state = c("INDIANA", "MINNESOTA", "MISSOURI", "OHIO"),
      year = paste(2000:2023),
      geometry = TRUE
    ) %>%
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name,
      state_fips_code, short_desc, Value
    )
)

(
  WHEAT_kan <-
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = "WHEAT",
      geographic_level = "COUNTY",
      state = c("KANSAS"),
      year = paste(2000:2023),
      geometry = TRUE
    ) %>%
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name,
      state_fips_code, short_desc, Value
    )
)

wheat_1 <- WHEAT_1
wheat_2 <-  WHEAT_iowa
wheat_3 <- WHEAT_rest
wheat_4 <-  WHEAT_kan
# SOYBEANS

(
  SOYBEANS <-
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = "SOYBEANS",
      geographic_level = "COUNTY",
      state = c("ILLINOIS", "IOWA", "MISSOURI", "KANSAS"),
      year = paste(2000:2023),
      geometry = TRUE
    ) %>%
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name,
      state_fips_code, short_desc, Value
    )
)


(
  SOYBEANS_2 <-
    tidyUSDA::getQuickstat(
      key = "169CA3FD-76B8-38E5-8DD7-F2CB7BCEC122",
      program = "SURVEY",
      commodity = "SOYBEANS",
      geographic_level = "COUNTY",
      state = c("INDIANA", "OHIO"),
      year = paste(2000:2023),
      geometry = TRUE
    ) %>%
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name,
      state_fips_code, short_desc, Value
    )
)

soybeans_1 <-  SOYBEANS
soybeans_2 <-  SOYBEANS_2


##

combined_all <- bind_rows(
  corn_1,
  corn_2,
  wheat_1,
  wheat_2,
  wheat_3,
  wheat_4,
  soybeans_1,
  soybeans_2
)

saveRDS(combined_all , "combined_all_yields_all_non_filtered.rds")
library(dplyr)

all_non_irr <- combined_all %>%
  filter(short_desc %in% c(
    "CORN, GRAIN - YIELD, MEASURED IN BU / ACRE",
    "CORN, GRAIN, NON-IRRIGATED - YIELD, MEASURED IN BU / ACRE",
    "WHEAT - YIELD, MEASURED IN BU / ACRE" ,
    "WHEAT, NON-IRRIGATED - YIELD, MEASURED IN BU / ACRE",
    "SOYBEANS - YIELD, MEASURED IN BU / ACRE" ,  
    "SOYBEANS, NON-IRRIGATED - YIELD, MEASURED IN BU / ACRE"
  ))

saveRDS(all_non_irr, "all_non_irr_yields_for_all_states.rds")



library(dplyr)

selected_short_desc <- c(
  "CORN, GRAIN, NON-IRRIGATED - YIELD, MEASURED IN BU / ACRE",
  "WHEAT, NON-IRRIGATED - YIELD, MEASURED IN BU / ACRE",
  "SOYBEANS, NON-IRRIGATED - YIELD, MEASURED IN BU / ACRE"
)

test_it <- all_non_irr %>%
  filter(
    !(state_name == "KANSAS" & !short_desc %in% selected_short_desc)
  )


saveRDS(test_it, "all_final_yields_for_all_states.rds")


###

com <- as.data.frame(test_it) %>%
  full_join(
    as.data.frame(Weather_after_2000),
    by = c("year" = "year", "county_code" = "COUNTYFP", "state_fips_code" = "STATEFP")
  ) %>%
  filter(complete.cases(across(-geometry)))

saveRDS(com, "com.rds")

com <- com[order(com$year), ]


# Load the dplyr package
library(dplyr)

# Create the new column 'crop' by extracting the crop name from 'short_desc'
com_2 <- com %>%
  mutate(crop = case_when(
    grepl("CORN", short_desc) ~ "CORN",
    grepl("WHEAT", short_desc) ~ "WHEAT",
    grepl("SOYBEANS", short_desc) ~ "SOYBEANS",
    TRUE ~ NA_character_  # For any unmatched rows
  ))




com_2$short_desc <- NULL

com_2 <- dplyr::select(com_2, year, county_name, county_code, state_name, state_fips_code, 
                       Value, crop, everything())


saveRDS(com_2, "com_2.rds")

```

# **SSURGO**

```{r}

states <- c("IA", "IL", "IN", "MN", "MO", "OH", "KS") 



all_data_states <- st_as_sf(all_states)
class(all_data_states)



counties <- com_2
counties <- st_as_sf(counties)


# Transform CRS to EPSG:4326
counties <- st_transform(counties, crs = 4326)
st_is_valid(counties)

```

# Get SC code for counties

```{r}

#  function to fetch sc_code for a single county
fetch_sc_code <- function(county_row) {
  tryCatch({
   
    result <- SDA_spatialQuery(county_row, what = "areasymbol", db = "SSURGO")
    if (!is.null(result)) {
      return(result$areasymbol[1])
    } else {
      return(NA)
    }
  }, error = function(e) {
 
    return(NA)
  })
}

# Apply function to each row
counties$sc_code <- purrr::map_chr(1:nrow(counties), function(i) {
  print(paste0("Fetching sc_code for county ", i, " of ", nrow(counties)))
  fetch_sc_code(counties[i, ])
})

# change to EPSG:4326 
counties <- st_transform(counties, crs = 4326)

saveRDS( counties, "com_3.rds")
```

# Download soil characteristics for counties

```{r}

dir.create("SSURGO", recursive = TRUE)

plan("multisession", workers = parallel::detectCores() - 1)

# Download and save SSURGO geometry (mukey) data for counties
files_ls <- lapply(1:nrow(counties), \(x) {
  file.exists(paste0("SSURGO/ssurgo_sf_", x, "_", counties$county_code[x], ".rds"))
}) %>% unlist()

future_lapply(
  which(!files_ls),
  \(x) {
    print(paste0(x, "/", nrow(counties)))
    
    ssurgo_geom_file_name <- paste0("SSURGO/ssurgo_sf_", x, "_", counties$county_code[x], ".rds")
    if (!file.exists(ssurgo_geom_file_name)) {
      print(paste0("(geom) working on ", x, "/", nrow(counties)))
      temp <- get_ssurgo_geom(county = counties[x, ])
      saveRDS(temp, ssurgo_geom_file_name)
    }
  }
)
###########################


# setwd("/Users/mmousavi2/Dropbox/Causal_climate/My_own_Shared/lt")





files_ls <-
  lapply(
    1:nrow(counties),
    \(x) {
      file.exists(paste0("SSURGO/ssurgo_sf_", x, "_", counties[x, ]$sc_code, ".rds"))
    }
  ) %>%
  unlist()


future_lapply(
  which(!files_ls),
  \(x) {
    print(paste0(x, "/", nrow(counties)))
    
    ssurgo_geom_file_name <- paste0("SSURGO/ssurgo_sf_", x, "_", counties[x, ]$sc_code, ".rds")
    if (!file.exists(ssurgo_geom_file_name)) {
      print(paste0("(geom) working on ", x, "/", nrow(counties)))
      temp <- get_ssurgo_geom(county = counties[x, ])
      saveRDS(temp, ssurgo_geom_file_name)
    }
  }
)


future_lapply(
  1:nrow(counties),
  \(x) {
    print(paste0(x, "/", nrow(counties)))
    
    ssurgo_geom_file_name <- paste0("SSURGO/ssurgo_sf_", x, "_", counties[x, ]$sc_code, ".rds")
    
    ssurgo_data_file_name <- paste0("SSURGO/ssurgo_data_", x, "_", counties[x, ]$sc_code, ".rds")
    
    if (!file.exists(ssurgo_data_file_name) & file.exists(ssurgo_geom_file_name)) {
      ssurgo_geom <- readRDS(ssurgo_geom_file_name)
      print(paste0("(data) Working on ", x, "/", nrow(counties)))
      temp <- get_ssurgo_raw_data(ssurgo_geom, vars = "awc_r")
      saveRDS(temp, ssurgo_data_file_name)
    }
  }
)


future_lapply(
  1:nrow(counties),
  \(x) {
    print(paste0(x, "/", nrow(counties)))
    
    ssurgo_data_file_name <- paste0("SSURGO/ssurgo_data_", x, "_", counties[x, ]$sc_code, ".rds")
    
    whc_file_name <- paste0("SSURGO/whc_", x, "_", counties[x, ]$sc_code, ".rds")
    
    if (!file.exists(whc_file_name) & file.exists(ssurgo_data_file_name)) {
      ssurgo_data <- readRDS(ssurgo_data_file_name)
      print(paste0("(whc) Working on ", x, "/", nrow(counties)))
      temp <- get_wch(ssurgo_data)
      saveRDS(temp, whc_file_name)
    }
  }
)


# ch
ssurgo_soil <-
  fs::dir_ls("SSURGO") %>%
  .[str_detect(., "whc")] %>%
  purrr::map(readRDS) %>%
  rbindlist()

saveRDS(ssurgo_soil, "ssurgo_soil_all.rds")





```

## Combine all data (weather, ssurgo, yield)

```{r}

Combined_yield_Weather_whc <- com_3 %>%
  left_join(ssurgo_soil_all, by = "sc_code")


saveRDS(Combined_yield_Weather_whc, "Combined_yield_Weather_whc_all_states.rds")

# Convert tmmn and tmmx from Kelvin to Celsius
Combined_yield_Weather_whc_all_states <- Combined_yield_Weather_whc_all_states %>%
  mutate(
    tmmn = tmmn - 273.15,
    tmmx = tmmx - 273.15
  )

saveRDS(Combined_yield_Weather_whc_all_states, "Combined_yield_Weather_whc_all_states_degree.rds")


```

---
title: "Estimation of the effect of a continuous treatment variable"
format:
  html: default
execute:
  echo: false
---

```{r}
#| include: false
library(data.table)
library(dplyr)
library(flextable)
library(officer)
```

# Introduction

+ Background
+ Why we need the methods we are proposing? Motivation.
+ Summary of findings 

# Method

We run Monte Carlo simulation to test the performance of ...

## Data generation


## Models and estimation procedures

We implement three estimation strategies—double‑orthogonalized, single‑orthogonalized, and non‑orthogonalized—that differ only in how (and whether) we orthogonalize the outcome and treatment before the final fit. Orthogonalization here means residualizing a variable by fitting it on all covariates and then taking the difference between the observed value and its prediction (we perform all residualizations using a random‑forest model). This ensures that our final model focuses on the component of variation that is not explained by the covariates.

In the double‑orthogonalized approach, we first remove covariate effects from the outcome by predicting the outcome using all covariates and subtracting those predictions from the observed values. Next, we repeat this process for the treatment variable, yielding residuals that capture only the variation in treatment unexplained by covariates. The final learner is then trained on these two sets of residuals. By construction, the model estimates treatment effects using only the variation in outcome and treatment that is orthogonal to the covariates.

The single‑orthogonalized method follows the same first step for the outcome but omits treatment residualization. After removing covariate effects from the outcome, we feed those outcome residuals—together with the original treatment values—into the final learner. This approach isolates covariate-driven patterns in the outcome while retaining the full treatment variation for effect estimation.

In the non‑orthogonalized specification, we skip any residualization and directly fit the chosen learner to the original outcome and treatment (and covariates, where applicable). This allows us to assess the added value of orthogonalization. For each of these three strategies, we implement three different final‑stage learners—neural networks, random forests, and causal forests—to examine how both the orthogonalization scheme and the choice of algorithm influence our estimated treatment effects.

The table below shows all the cases we consider.


```{r}
#| include: false
f_est <-
  data.table(
    "Approach Label" = c("DO-NN", "SO-RFF", "SO-NN", "DO-CF","NO-NN", "NO-RF"),
    "Approach Type" = c("Double-orthogonalized", "Single-orthogonalized", "Single-orthogonalized", "Double-orthogonalized", "Non-orthogonalized", "Non-orthogonalized"),
    "Y-orthogonalization" = c("Randome Forest", "Randome Forest", "Randome Forest", "Randome Forest", "NA", "NA"),
    "T-orthogonalization" = c("Randome Forest", "NA", "NA", "Randome Forest", "NA", "NA"),
    "Final stage" = c("Neural Network", "Random Forest", "Neural Network", "Causal Forest", "Neural Network", "Random Forest")
  ) %>%
  flextable() %>%
  fontsize(size = 16, part = "all") %>%
  autofit()

flextable::save_as_image(f_est, here::here("writing/f_est.png"), res = 300)
```

```{r}
#| echo: false
#| fig-width: 4
#| out-width: 4in
knitr::include_graphics(here::here("writing/f_est.png"))
```

### Double-orthogonalized ANN (DO-ANN) and CF (DO-CF)

#### DO‑ANN

In the DO‑ANN approach, we estimate the yield response function 

```{=tex}
\begin{align*}
\hat{y}=\hat{f}(N: X)
\end{align*}
```

using a structured neural network within a double‑machine‑learning (R‑learner) framework. Here $X$ represents observable soil and field characteristics that vary within a field in a spatially correlated manner and govern how yield responds to the nitrogen rate $N$.
First, we orthogonalize both the outcome and the treatment basis variables by fitting each on all covariates $X$ (using cross‑fitted random forests) and taking residuals. For the treatment, we decompose the nitrogen rate into three basis functions and residualize each to obtain $\tilde{T}_1, \tilde{T}_2, \tilde{T}_3$. For the outcome, we similarly compute $Y-\hat{g}(X)$. Here $\hat{g}(X)$ denotes the predicted yield given covariates.
The neural network itself has three parallel branches. Each branch processes the covariate vector $X$ through a feed‑forward network $f_k(X)$ and multiplies the output by the corresponding residualized treatment basis $\tilde{T}_k$. Summing these branch outputs yields the predicted yield

```{=tex}
\begin{align*}
\hat{y}_i(N)=\sum_{k=1}^3 f_k\left(X_i\right) \tilde{T}_{k, i}
\end{align*}
```

so that $\hat{f}$ maps any nitrogen rate $N$ (via its basis representation) and covariates $X$ to a yield estimate. Once trained, we obtain economically optimal nitrogen rates (EONR) by evaluating $\hat{f}$ on a grid of $N$ values for each observation $i$, computing the marginal profit

```{=tex}
\begin{align*}
\operatorname{MP}\left(N ; X_i\right)=P_{\text {corn }} \times \hat{y}_i(N)-P_N \times N
\end{align*}
```

and selecting the $N$ that maximizes profit function (where $P_{\text {corn }}$ is the market price of corn and $P_{\text {N }}$ is the per‑unit cost of nitrogen. This grid‑search procedure is applied separately to each field in the test set to generate site‑specific EONR estimates.

#### DO‑CF (continuous)

The DO‑CF specification follows the same double‑orthogonalization steps as DO‑ANN, but replace the neural network with a causal forest for the final estimation. 
We specify the CF model

```{=tex}
\begin{align*}
Y=\sum_{k=1}^K \theta_k(X) \cdot S_k(N)+g(X)+v
\end{align*}
```

where 
$Y$ is corn yield, $S_k(N)$ the $k$ th treatment basis function, and $g(X)$ the nuisance component. Following the double‑orthogonalization procedure, we first residualize $Y$ on $X$ by cross‑fitting a random forest regression to obtain $\tilde{Y}=Y-\widehat{g}(X)$. Next, we residualize each treatment basis $S_k(N)$ on $X$ in the same manner to produce $\tilde{S}_k=S_k(N)-\widehat{m}_k(X)$ for $k=1, \ldots, K$, where $\widehat{m}_k(X)$ is the cross-fitted prediction of the $k$ th basis function from covariates $X$. 
Let the orthogonalized outcome and treatment basis variables be denoted as $\tilde{Y}$ and $\tilde{S}_k(N)$ respectively. The final stage fits a causal forest to the residualized data by solving the following minimization problem:

```{=tex}
\begin{align*}
\operatorname{Min} \sum_{i=1}^N\left[\tilde{Y}_i-\sum_{k=1}^K \theta_k\left(X_i\right) \cdot \tilde{S}_k\left(N_i\right)\right]^2
\end{align*}
```
Once the functions $\theta_k(X)$ are estimated, we recover the predicted yield response for any nitrogen rate $N$ and covariates $X$ as 

```{=tex}
\begin{align*}
\hat{Y}(N: X)=\sum_{k=1}^K \hat{\theta}_k(X) \cdot S_k(N)
\end{align*}
```

As before, we perform a grid search over a sequence of $N$ values to identify the profit-maximizing N rate.

### Single-orthogonalized NN (SO-NN) and (SO-RF)

In the single‑orthogonalized framework, only the outcome is residualized prior to the final-stage estimation, while the treatment variable remains in its original form. Specifically, we estimate the yield response function $\hat{Y}=\hat{f}(X, N)$.
The first step involves orthogonalizing the outcome variable by cross-fitting a RF regression of $Y$ oN $X$ yielding residualized outcomes $\tilde{Y}$. In the second stage, the residualized outcome $\tilde{Y}$ is regressed on both $X$ and $N$ simultaneously, using a nonparametric learner. The treatment variable is not decomposed into basis functions, and no orthogonalization is applied to it. 
The difference between SO‑NN and SO‑RF lies in the choice of final learner: SO‑NN uses a neural network, while SO‑RF uses a random forest. In both cases, the model learns the mapping $\hat{f}(N: X)$ and is then used to predict yield responses over a grid of nitrogen rates. As in previous approaches, we compute the marginal profit for each candidate rate and select the nitrogen rate that maximizes this function.




### Non-orthogonalized ANN (NO-NN) and RF (NO-RF)

In the non‑orthogonalized setting, neither the outcome variable nor the treatment is residualized prior to estimation. Instead, the model directly fits the observed yield on both the nitrogen rate and covariates. We estimate the response function $\hat{Y}=\hat{f}(X, N)$ using the original values of $Y$, $N$ and $X$, without any orthogonalization. As in the single‑orthogonalized approaches, the function $\hat{f}(X, N)$ is estimated non‑parametrically. The difference between NO‑NN and NO‑RF lies in the choice of final-stage learner: NO‑NN uses a neural network, while NO‑RF relies on a random forest. Once the yield response function is estimated, the EONR is determined using the same profit-maximization procedure described in earlier models.




## Performance Measurement

For each simulation round, we evaluate model performance by calculating the root mean squared error (RMSE) of EONR predictions and the associated profit loss for each method. The RMSE of EONR predictions in a given simulation round is computed as follows:


```{=tex}
\begin{align*}
RMSE_{EONR}=\sqrt{\frac{1}{n} \sum_{i=1}^n\left(\widehat{EONR}_i-EONR_i\right)^2}
\end{align*}
```

To assess the predictive accuracy and economic relevance of these modeling approaches, we design a set of simulation experiments that reflect realistic agronomic conditions. These simulations serve as a controlled environment for evaluating model performance in estimating yield response functions and recommending optimal nitrogen rates.

## Simulation Scenarios

To evaluate the performance of the proposed models we design Monte Carlo simulations that mimic a typical on-farm precision experimentation (OFPE) setting. These simulations examine the ability of each method to accurately estimate the site-specific yield response to nitrogen application and the EONR under varying data availability conditions.

Our simulation consists of 500 independently generated fields, each representing a distinct agronomic environment with field-specific parameters that shape the crop’s response to nitrogen application. These parameters vary systematically across fields to introduce heterogeneity in yield responses. The true yield response in each field follows a quadratic-plateau functional form, a widely used structure for modeling nitrogen response curves in agronomic studies.

For each simulation round, one field is selected as the test field. The remaining fields are used to construct the training set in three scenarios: (1) one-field training, (2) five-field training, and (3) ten-field training. These scenarios allow us to assess how model performance changes with the size and diversity of training data. Within each round, the model is trained on the designated number of training fields and then used to estimate the yield response function and the site-specific EONR for the test field.

The experimental design within each field consists of randomized nitrogen treatment rates applied across plots. The nitrogen rates vary between fields and are drawn to reflect realistic trial setups that span a range of agronomic optima. For evaluation purposes, we use a grid of candidate nitrogen rates to compute predicted yield and associated marginal profit for each observation. The predicted EONR is the nitrogen rate that maximizes predicted profit.

# Results and Discussions


# Conclusion




